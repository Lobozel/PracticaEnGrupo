/*
 * Flores.java
 *
 * Generated with Matisse Schema Definition Language 9.1.11
 * Generation date: Wed Feb 20 18:38:40 2019
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>Flores</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Flores extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.11
     * Generation Date: Wed Feb 20 18:38:40 2019
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Flores</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("Flores"));

    /**
     * Gets the <code>Flores</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Flores(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Flores(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Flores.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Flores.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Flores.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Flores.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'idFlor' */

    /** Attribute <code>idFlor</code> cache ID */
    private static int idFlorCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("idFlor",CID));

    /**
     * Gets the <code>idFlor</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdFlorAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idFlorCID);
    }


    /**
     * Gets the <code>idFlor</code> attribute value.
     * @return the value
     *
     * @see #setIdFlor
     * @see #removeIdFlor
     */
    public final int getIdFlor() {
        return getInteger(getIdFlorAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>idFlor</code> attribute value.
     * @param val the new value
     *
     * @see #getIdFlor
     * @see #removeIdFlor
     */
    public final void setIdFlor(int val) {
        setInteger(getIdFlorAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>idFlor</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIdFlor
     * @see #setIdFlor
     */
    public final void removeIdFlor() {
        removeValue(getIdFlorAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIdFlor
     * @see #setIdFlor
     */
    public final boolean isIdFlorDefaultValue() {
        return isDefaultValue(getIdFlorAttribute(getMtDatabase()));
    }


    /* Attribute 'nombreFlor' */

    /** Attribute <code>nombreFlor</code> cache ID */
    private static int nombreFlorCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombreFlor",CID));

    /**
     * Gets the <code>nombreFlor</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreFlorAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreFlorCID);
    }


    /**
     * Gets the <code>nombreFlor</code> attribute value.
     * @return the value
     *
     * @see #setNombreFlor
     * @see #removeNombreFlor
     */
    public final String getNombreFlor() {
        return getString(getNombreFlorAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombreFlor</code> attribute value.
     * @param val the new value
     *
     * @see #getNombreFlor
     * @see #removeNombreFlor
     */
    public final void setNombreFlor(String val) {
        setString(getNombreFlorAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombreFlor</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombreFlor
     * @see #setNombreFlor
     */
    public final void removeNombreFlor() {
        removeValue(getNombreFlorAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombreFlor
     * @see #setNombreFlor
     */
    public final boolean isNombreFlorDefaultValue() {
        return isDefaultValue(getNombreFlorAttribute(getMtDatabase()));
    }


    /* Attribute 'color' */

    /** Attribute <code>color</code> cache ID */
    private static int colorCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("color",CID));

    /**
     * Gets the <code>color</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getColorAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(colorCID);
    }


    /**
     * Gets the <code>color</code> attribute value.
     * @return the value
     *
     * @see #setColor
     * @see #removeColor
     */
    public final String getColor() {
        return getString(getColorAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>color</code> attribute value.
     * @param val the new value
     *
     * @see #getColor
     * @see #removeColor
     */
    public final void setColor(String val) {
        setString(getColorAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>color</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getColor
     * @see #setColor
     */
    public final void removeColor() {
        removeValue(getColorAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getColor
     * @see #setColor
     */
    public final boolean isColorDefaultValue() {
        return isDefaultValue(getColorAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'pertenece' */

    /** Relationship <code>pertenece</code> cache ID */
    private static int perteneceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("pertenece",CID));

    /**
     * Gets the <code>pertenece</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getPerteneceRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(perteneceCID);
    }

    /**
     * Gets the <code>pertenece</code> sucessor object.
     * @return an object 
     *
     * @see #setPertenece
     * @see #clearPertenece
     */
    public final Perfume getPertenece() {
        return (Perfume)getSuccessor(getPerteneceRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>pertenece</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getPertenece
     * @see #clearPertenece
     */
    public final void setPertenece(Perfume succ) {
        setSuccessor(getPerteneceRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>pertenece</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearPertenece() {
        clearSuccessors(getPerteneceRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Flores(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Flores]";
    }
}
