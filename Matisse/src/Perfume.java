/*
 * Perfume.java
 *
 * Generated with Matisse Schema Definition Language 9.1.11
 * Generation date: Wed Feb 20 18:38:40 2019
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>Perfume</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Perfume extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.11
     * Generation Date: Wed Feb 20 18:38:40 2019
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Perfume</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("Perfume"));

    /**
     * Gets the <code>Perfume</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Perfume(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Perfume(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Perfume.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Perfume.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Perfume.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Perfume.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'idPerf' */

    /** Attribute <code>idPerf</code> cache ID */
    private static int idPerfCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("idPerf",CID));

    /**
     * Gets the <code>idPerf</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdPerfAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idPerfCID);
    }


    /**
     * Gets the <code>idPerf</code> attribute value.
     * @return the value
     *
     * @see #setIdPerf
     * @see #removeIdPerf
     */
    public final int getIdPerf() {
        return getInteger(getIdPerfAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>idPerf</code> attribute value.
     * @param val the new value
     *
     * @see #getIdPerf
     * @see #removeIdPerf
     */
    public final void setIdPerf(int val) {
        setInteger(getIdPerfAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>idPerf</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIdPerf
     * @see #setIdPerf
     */
    public final void removeIdPerf() {
        removeValue(getIdPerfAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIdPerf
     * @see #setIdPerf
     */
    public final boolean isIdPerfDefaultValue() {
        return isDefaultValue(getIdPerfAttribute(getMtDatabase()));
    }


    /* Attribute 'nombrePerf' */

    /** Attribute <code>nombrePerf</code> cache ID */
    private static int nombrePerfCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombrePerf",CID));

    /**
     * Gets the <code>nombrePerf</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombrePerfAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombrePerfCID);
    }


    /**
     * Gets the <code>nombrePerf</code> attribute value.
     * @return the value
     *
     * @see #setNombrePerf
     * @see #removeNombrePerf
     */
    public final String getNombrePerf() {
        return getString(getNombrePerfAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombrePerf</code> attribute value.
     * @param val the new value
     *
     * @see #getNombrePerf
     * @see #removeNombrePerf
     */
    public final void setNombrePerf(String val) {
        setString(getNombrePerfAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombrePerf</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombrePerf
     * @see #setNombrePerf
     */
    public final void removeNombrePerf() {
        removeValue(getNombrePerfAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombrePerf
     * @see #setNombrePerf
     */
    public final boolean isNombrePerfDefaultValue() {
        return isDefaultValue(getNombrePerfAttribute(getMtDatabase()));
    }


    /* Attribute 'precio' */

    /** Attribute <code>precio</code> cache ID */
    private static int precioCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("precio",CID));

    /**
     * Gets the <code>precio</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPrecioAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(precioCID);
    }


    /**
     * Gets the <code>precio</code> attribute value.
     * @return the value
     *
     * @see #setPrecio
     * @see #removePrecio
     */
    public final double getPrecio() {
        return getDouble(getPrecioAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>precio</code> attribute value.
     * @param val the new value
     *
     * @see #getPrecio
     * @see #removePrecio
     */
    public final void setPrecio(double val) {
        setDouble(getPrecioAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>precio</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPrecio
     * @see #setPrecio
     */
    public final void removePrecio() {
        removeValue(getPrecioAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPrecio
     * @see #setPrecio
     */
    public final boolean isPrecioDefaultValue() {
        return isDefaultValue(getPrecioAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'posee' */

    /** Relationship <code>posee</code> cache ID */
    private static int poseeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("posee",CID));

    /**
     * Gets the <code>posee</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getPoseeRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(poseeCID);
    }

    /**
     * Gets the <code>posee</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getPoseeSize
     * @see #poseeIterator
     * @see #setPosee
     * @see #removePosee
     */
    public final Flores[] getPosee() {
        return (Flores[])getSuccessors(getPoseeRelationship(getMtDatabase()), Flores.class);
    }

    /**
     * Counts the <code>posee</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getPosee
     * @see #poseeIterator
     * @see #setPosee
     * @see #removePosee
     */
    public final int getPoseeSize() {
        return getSuccessorSize(getPoseeRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>posee</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getPosee
     * @see #getPoseeSize
     * @see #setPosee
     * @see #removePosee
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> poseeIterator() {
        return this.<E>successorIterator(getPoseeRelationship(getMtDatabase()), Flores.class);
    }

    /**
     * Sets the <code>posee</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getPosee
     * @see #getPoseeSize
     * @see #poseeIterator
     * @see #removePosee
     */
    public final void setPosee(Flores[] succs) {
        setSuccessors(getPoseeRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>posee</code> successors list.
     * @param succ the object to add
     *
     * @see #getPosee
     * @see #getPoseeSize
     * @see #poseeIterator
     * @see #setPosee
     * @see #removePosee
     */
    public final void prependPosee(Flores succ) {
        prependSuccessor(getPoseeRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>posee</code> successors list.
     * @param succ the object to add
     *
     * @see #getPosee
     * @see #setPosee
     * @see #removePosee
     * @see #getPoseeSize
     * @see #poseeIterator
     */
    public final void appendPosee(Flores succ) {
        appendSuccessor(getPoseeRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>posee</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getPosee
     * @see #setPosee
     * @see #removePosee
     * @see #getPoseeSize
     * @see #poseeIterator
     */
    public final void appendPosee(Flores[] succs) {
        addSuccessors(getPoseeRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>posee</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getPosee
     * @see #setPosee
     * @see #getPoseeSize
     * @see #poseeIterator
     */
    public void removePosee(Flores[] succs) {
        removeSuccessors(getPoseeRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>posee</code> successors list.
     * @param succ the object to remove
     *
     * @see #getPosee
     * @see #setPosee
     * @see #getPoseeSize
     * @see #poseeIterator
     */
    public void removePosee(Flores succ) {
        removeSuccessor(getPoseeRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>posee</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearPosee() {
        clearSuccessors(getPoseeRelationship(getMtDatabase()));
    }


    /* Relationship 'se_vende' */

    /** Relationship <code>se_vende</code> cache ID */
    private static int se_vendeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("se_vende",CID));

    /**
     * Gets the <code>se_vende</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getSe_vendeRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(se_vendeCID);
    }

    /**
     * Gets the <code>se_vende</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     * @see #setSe_vende
     * @see #removeSe_vende
     */
    public final Tienda[] getSe_vende() {
        return (Tienda[])getSuccessors(getSe_vendeRelationship(getMtDatabase()), Tienda.class);
    }

    /**
     * Counts the <code>se_vende</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getSe_vende
     * @see #se_vendeIterator
     * @see #setSe_vende
     * @see #removeSe_vende
     */
    public final int getSe_vendeSize() {
        return getSuccessorSize(getSe_vendeRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>se_vende</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getSe_vende
     * @see #getSe_vendeSize
     * @see #setSe_vende
     * @see #removeSe_vende
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> se_vendeIterator() {
        return this.<E>successorIterator(getSe_vendeRelationship(getMtDatabase()), Tienda.class);
    }

    /**
     * Sets the <code>se_vende</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     * @see #removeSe_vende
     */
    public final void setSe_vende(Tienda[] succs) {
        setSuccessors(getSe_vendeRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>se_vende</code> successors list.
     * @param succ the object to add
     *
     * @see #getSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     * @see #setSe_vende
     * @see #removeSe_vende
     */
    public final void prependSe_vende(Tienda succ) {
        prependSuccessor(getSe_vendeRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>se_vende</code> successors list.
     * @param succ the object to add
     *
     * @see #getSe_vende
     * @see #setSe_vende
     * @see #removeSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     */
    public final void appendSe_vende(Tienda succ) {
        appendSuccessor(getSe_vendeRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>se_vende</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getSe_vende
     * @see #setSe_vende
     * @see #removeSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     */
    public final void appendSe_vende(Tienda[] succs) {
        addSuccessors(getSe_vendeRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>se_vende</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getSe_vende
     * @see #setSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     */
    public void removeSe_vende(Tienda[] succs) {
        removeSuccessors(getSe_vendeRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>se_vende</code> successors list.
     * @param succ the object to remove
     *
     * @see #getSe_vende
     * @see #setSe_vende
     * @see #getSe_vendeSize
     * @see #se_vendeIterator
     */
    public void removeSe_vende(Tienda succ) {
        removeSuccessor(getSe_vendeRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>se_vende</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearSe_vende() {
        clearSuccessors(getSe_vendeRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Perfume(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Perfume]";
    }
}
